{"version":3,"sources":["App.js","index.js"],"names":["App","useState","currentAccount","setCurrentAccount","wavetext","setwavetext","contractAddress","contractABI","abi","checkIfWalletIsConnected","a","window","ethereum","console","log","request","method","accounts","length","account","getAllWaves","connectWallet","event","alert","wave","provider","ethers","providers","Web3Provider","signer","getSigner","wavePortalContract","Contract","preventDefault","getTotalWaves","count","toNumber","gasLimit","waveTxn","hash","wait","allWaves","setAllWaves","waves","wavesCleaned","map","address","waver","timestamp","Date","message","useEffect","onNewWave","from","prevState","on","off","className","onSubmit","type","name","onChange","target","value","placeholder","onClick","index","key","style","backgroundColor","marginTop","padding","toString","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a48b2756.chunk.js","sourcesContent":["import { ethers } from \"ethers\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport \"./App.css\";\r\nimport abi from \"./Contracts/Wavepatrol.json\";\r\n\r\nconst App = () => {\r\n  const [currentAccount, setCurrentAccount] = useState(\"\");\r\n  const [wavetext, setwavetext] = useState(\"\");\r\n  const WaveChangeHandler = (event) => {\r\n    event.preventDefault();\r\n    setwavetext(event.target.value);\r\n  };\r\n  \r\n  /**\r\n   * Create a variable here that holds the contract address after you deploy!\r\n   */\r\n  const contractAddress = \"0xf1F7838a3e1939404aa3Fa868F0bDEF2F94EBdd8\";\r\n  const contractABI = abi.abi;\r\n\r\n  const checkIfWalletIsConnected = async () => {\r\n    /*\r\n     * First make sure we have access to window.ethereum\r\n     */\r\n    try {\r\n      const { ethereum } = window;\r\n\r\n      if (!ethereum) {\r\n        console.log(\"Make sure you have metamask!\");\r\n        return;\r\n      } else {\r\n        console.log(\"We have the ethereum object\", ethereum);\r\n      }\r\n\r\n      /*\r\n       * Check if we're authorized to access the user's wallet\r\n       */\r\n      const accounts = await ethereum.request({ method: \"eth_accounts\" });\r\n\r\n      if (accounts.length !== 0) {\r\n        const account = accounts[0];\r\n        console.log(\"Found an authorized account:\", account);\r\n        setCurrentAccount(account);\r\n        getAllWaves();\r\n      } else {\r\n        console.log(\"No authorized account found\");\r\n      }\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  const connectWallet = async (event) => {\r\n    try {\r\n      const { ethereum } = window;\r\n\r\n      if (!ethereum) {\r\n        alert(\"Get MetaMask!\");\r\n        return;\r\n      }\r\n\r\n      const accounts = await ethereum.request({\r\n        method: \"eth_requestAccounts\",\r\n      });\r\n\r\n      console.log(\"Connected\", accounts[0]);\r\n      setCurrentAccount(accounts[0]);\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n  const wave = async (event) => {\r\n    try {\r\n      const { ethereum } = window;\r\n\r\n      if (ethereum) {\r\n        // The network will be automatically detected; if the network is\r\n        // changed in MetaMask, it causes a page refresh.\r\n        const provider = new ethers.providers.Web3Provider(ethereum);\r\n        const signer = provider.getSigner();\r\n        const wavePortalContract = new ethers.Contract(\r\n          contractAddress,\r\n          contractABI,\r\n          signer\r\n        );\r\n        event.preventDefault();\r\n\r\n        let count = await wavePortalContract.getTotalWaves();\r\n        console.log(\"Retrieved total wave count...\", count.toNumber());\r\n        /*\r\n         * Execute the actual wave from your smart contract\r\n         */\r\n        const waveTxn = await wavePortalContract.wave(wavetext, {\r\n          gasLimit: 300000,\r\n        });\r\n\r\n        console.log(\"Mining...\", waveTxn.hash);\r\n\r\n        await waveTxn.wait();\r\n        console.log(\"Mined -- \", waveTxn.hash);\r\n\r\n        count = await wavePortalContract.getTotalWaves();\r\n        console.log(\"Retrieved total wave count...\", count.toNumber());\r\n      } else {\r\n        console.log(\"Ethereum object doesn't exist!\");\r\n      }\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  // New Func ----------------\r\n\r\n  /* All state property to store all waves\r\n   */\r\n  const [allWaves, setAllWaves] = useState([]);\r\n\r\n  /*\r\n   * Create a method that gets all waves from your contract\r\n   */\r\n  const getAllWaves = async () => {\r\n    try {\r\n      const { ethereum } = window;\r\n      if (ethereum) {\r\n        const provider = new ethers.providers.Web3Provider(ethereum);\r\n        const signer = provider.getSigner();\r\n        const wavePortalContract = new ethers.Contract(\r\n          contractAddress,\r\n          contractABI,\r\n          signer\r\n        );\r\n        /*\r\n         * Call the getAllWaves method from your Smart Contract\r\n         */\r\n        const waves = await wavePortalContract.getAllWaves();\r\n\r\n        /*\r\n         * We only need address, timestamp, and message in our UI so let's\r\n         * pick those out\r\n         */\r\n        const wavesCleaned = waves.map((wave) => {\r\n          return {\r\n            address: wave.waver,\r\n            timestamp: new Date(wave.timestamp * 1000),\r\n            message: wave.message,\r\n          };\r\n        });\r\n\r\n        /*\r\n         * Store our data in React State\r\n         */\r\n        setAllWaves(wavesCleaned);\r\n      } else {\r\n        console.log(\"Ethereum object doesn't exist!\");\r\n      }\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n  useEffect(() => {\r\n    checkIfWalletIsConnected();\r\n    /**\r\n     * Listen in for emitter events!\r\n     */\r\n    let wavePortalContract;\r\n\r\n    const onNewWave = (from, timestamp, message) => {\r\n      console.log(\"NewWave\", from, timestamp, message);\r\n      setAllWaves((prevState) => [\r\n        ...prevState,\r\n        {\r\n          address: from,\r\n          timestamp: new Date(timestamp * 1000),\r\n          message: message,\r\n        },\r\n      ]);\r\n    };\r\n\r\n    if (window.ethereum) {\r\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\r\n      const signer = provider.getSigner();\r\n\r\n      wavePortalContract = new ethers.Contract(\r\n        contractAddress,\r\n        contractABI,\r\n        signer\r\n      );\r\n      wavePortalContract.on(\"NewWave\", onNewWave);\r\n    }\r\n\r\n    return () => {\r\n      if (wavePortalContract) {\r\n        wavePortalContract.off(\"NewWave\", onNewWave);\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"mainContainer\">\r\n      <div className=\"dataContainer\">\r\n        <div className=\"header\">ðŸ‘‹ Hey there!</div>\r\n\r\n        <div className=\"bio\">\r\n          1. Get MetaMask <br />\r\n          2. Connect Your Wallet <br />\r\n          3. Write a Message to wave to yourself\r\n        </div>\r\n        <form onSubmit={wave} className=\"-form\">\r\n          <h1>Wave</h1>\r\n          <input\r\n            type=\"text\"\r\n            name=\"username\"\r\n            onChange={WaveChangeHandler}\r\n            placeholder=\"Write Your Message\"\r\n            className=\"input-\"\r\n          />\r\n          <button type=\"submit\" className=\"bn15 \">\r\n            Wave at Self\r\n          </button>\r\n        </form>\r\n\r\n        {!currentAccount && (\r\n          <button className=\"bn15 \" onClick={connectWallet}>\r\n            Connect Wallet\r\n          </button>\r\n        )}\r\n\r\n        {allWaves.map((wave, index) => {\r\n          return (\r\n            <div\r\n              key={index}\r\n              style={{\r\n                backgroundColor: \"OldLace\",\r\n                marginTop: \"16px\",\r\n                padding: \"8px\",\r\n              }}\r\n            >\r\n              <div>Address: {wave.address}</div>\r\n              <div>Time: {wave.timestamp.toString()}</div>\r\n              <div>Message: {wave.message}</div>\r\n            </div>\r\n          );\r\n        })}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n"],"sourceRoot":""}